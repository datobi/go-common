// Code generated by MockGen. DO NOT EDIT.
// Source: pubsub/pubsub_client.go
//
// Generated by this command:
//
//	mockgen -source=pubsub/pubsub_client.go -destination=pubsub/mock/pubsub_client_mock.go
//
// Package mock_pubsub is a generated GoMock package.
package mock_pubsub

import (
	context "context"
	reflect "reflect"

	pubsub "cloud.google.com/go/pubsub"
	gomock "go.uber.org/mock/gomock"
)

// MockGooglePubSub is a mock of GooglePubSub interface.
type MockGooglePubSub struct {
	ctrl     *gomock.Controller
	recorder *MockGooglePubSubMockRecorder
}

// MockGooglePubSubMockRecorder is the mock recorder for MockGooglePubSub.
type MockGooglePubSubMockRecorder struct {
	mock *MockGooglePubSub
}

// NewMockGooglePubSub creates a new mock instance.
func NewMockGooglePubSub(ctrl *gomock.Controller) *MockGooglePubSub {
	mock := &MockGooglePubSub{ctrl: ctrl}
	mock.recorder = &MockGooglePubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGooglePubSub) EXPECT() *MockGooglePubSubMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGooglePubSub) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGooglePubSubMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGooglePubSub)(nil).Close))
}

// CreateSubscription mocks base method.
func (m *MockGooglePubSub) CreateSubscription(ctx context.Context, id string, cfg pubsub.SubscriptionConfig) (*pubsub.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, id, cfg)
	ret0, _ := ret[0].(*pubsub.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockGooglePubSubMockRecorder) CreateSubscription(ctx, id, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockGooglePubSub)(nil).CreateSubscription), ctx, id, cfg)
}

// CreateTopic mocks base method.
func (m *MockGooglePubSub) CreateTopic(ctx context.Context, topicID string) (*pubsub.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", ctx, topicID)
	ret0, _ := ret[0].(*pubsub.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockGooglePubSubMockRecorder) CreateTopic(ctx, topicID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockGooglePubSub)(nil).CreateTopic), ctx, topicID)
}

// Subscription mocks base method.
func (m *MockGooglePubSub) Subscription(id string) *pubsub.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscription", id)
	ret0, _ := ret[0].(*pubsub.Subscription)
	return ret0
}

// Subscription indicates an expected call of Subscription.
func (mr *MockGooglePubSubMockRecorder) Subscription(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscription", reflect.TypeOf((*MockGooglePubSub)(nil).Subscription), id)
}

// Topic mocks base method.
func (m *MockGooglePubSub) Topic(id string) *pubsub.Topic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic", id)
	ret0, _ := ret[0].(*pubsub.Topic)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MockGooglePubSubMockRecorder) Topic(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockGooglePubSub)(nil).Topic), id)
}
